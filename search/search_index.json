{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"decision-tree/main/","title":"\u00c1rvore de Decis\u00e3o","text":"In\u00a0[5]: Copied! <pre># %%\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier, plot_tree\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n</pre> # %% import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier, plot_tree from sklearn.metrics import accuracy_score, classification_report, confusion_matrix In\u00a0[6]: Copied! <pre># %%\n# Carrega o dataset Iris\niris = load_iris()\n\n# Converte para DataFrame do Pandas para facilitar a manipula\u00e7\u00e3o\nX = pd.DataFrame(iris.data, columns=iris.feature_names)\ny = pd.Series(iris.target, name=\"species\")\n\n# Exibe as 5 primeiras linhas do DataFrame\nX.head()\n</pre> # %% # Carrega o dataset Iris iris = load_iris()  # Converte para DataFrame do Pandas para facilitar a manipula\u00e7\u00e3o X = pd.DataFrame(iris.data, columns=iris.feature_names) y = pd.Series(iris.target, name=\"species\")  # Exibe as 5 primeiras linhas do DataFrame X.head() Out[6]: sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 0 5.1 3.5 1.4 0.2 1 4.9 3.0 1.4 0.2 2 4.7 3.2 1.3 0.2 3 4.6 3.1 1.5 0.2 4 5.0 3.6 1.4 0.2 In\u00a0[7]: Copied! <pre># %%\n# Mostra estat\u00edsticas descritivas das vari\u00e1veis\nX.describe()\n</pre> # %% # Mostra estat\u00edsticas descritivas das vari\u00e1veis X.describe() Out[7]: sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) count 150.000000 150.000000 150.000000 150.000000 mean 5.843333 3.057333 3.758000 1.199333 std 0.828066 0.435866 1.765298 0.762238 min 4.300000 2.000000 1.000000 0.100000 25% 5.100000 2.800000 1.600000 0.300000 50% 5.800000 3.000000 4.350000 1.300000 75% 6.400000 3.300000 5.100000 1.800000 max 7.900000 4.400000 6.900000 2.500000 In\u00a0[8]: Copied! <pre># %%\n# Gera histogramas para cada vari\u00e1vel\nX.hist(figsize=(10, 8))\nplt.suptitle(\"Distribui\u00e7\u00e3o das vari\u00e1veis\")\nplt.show()\n</pre> # %% # Gera histogramas para cada vari\u00e1vel X.hist(figsize=(10, 8)) plt.suptitle(\"Distribui\u00e7\u00e3o das vari\u00e1veis\") plt.show() In\u00a0[9]: Copied! <pre># %%\n# Divide o dataset em treino (70%) e teste (30%)\n# O stratify=y garante que a propor\u00e7\u00e3o das classes seja a mesma nos dois conjuntos\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.3, random_state=42, stratify=y\n)\n\nprint(f\"Tamanho do conjunto de treino: {X_train.shape[0]} amostras\")\nprint(f\"Tamanho do conjunto de teste: {X_test.shape[0]} amostras\")\n</pre> # %% # Divide o dataset em treino (70%) e teste (30%) # O stratify=y garante que a propor\u00e7\u00e3o das classes seja a mesma nos dois conjuntos X_train, X_test, y_train, y_test = train_test_split(     X, y, test_size=0.3, random_state=42, stratify=y )  print(f\"Tamanho do conjunto de treino: {X_train.shape[0]} amostras\") print(f\"Tamanho do conjunto de teste: {X_test.shape[0]} amostras\") <pre>Tamanho do conjunto de treino: 105 amostras\nTamanho do conjunto de teste: 45 amostras\n</pre> In\u00a0[10]: Copied! <pre># %%\n# Cria o classificador de \u00c1rvore de Decis\u00e3o\n# criterion=\"entropy\" usa a entropia como medida de impureza\nclf = DecisionTreeClassifier(criterion=\"entropy\", random_state=42)\n\n# Treina o modelo com os dados de treino\nclf.fit(X_train, y_train)\n\nprint(\"Modelo treinado com sucesso!\")\n</pre> # %% # Cria o classificador de \u00c1rvore de Decis\u00e3o # criterion=\"entropy\" usa a entropia como medida de impureza clf = DecisionTreeClassifier(criterion=\"entropy\", random_state=42)  # Treina o modelo com os dados de treino clf.fit(X_train, y_train)  print(\"Modelo treinado com sucesso!\") <pre>Modelo treinado com sucesso!\n</pre> In\u00a0[11]: Copied! <pre># %%\n# Faz previs\u00f5es nos dados de teste\ny_pred = clf.predict(X_test)\n\n# Imprime a acur\u00e1cia\nprint(\"Acur\u00e1cia:\", accuracy_score(y_test, y_pred))\n\n# Imprime o relat\u00f3rio de classifica\u00e7\u00e3o com precis\u00e3o, recall e f1-score\nprint(\"\\nRelat\u00f3rio de classifica\u00e7\u00e3o:\\n\", classification_report(y_test, y_pred, target_names=iris.target_names))\n</pre> # %% # Faz previs\u00f5es nos dados de teste y_pred = clf.predict(X_test)  # Imprime a acur\u00e1cia print(\"Acur\u00e1cia:\", accuracy_score(y_test, y_pred))  # Imprime o relat\u00f3rio de classifica\u00e7\u00e3o com precis\u00e3o, recall e f1-score print(\"\\nRelat\u00f3rio de classifica\u00e7\u00e3o:\\n\", classification_report(y_test, y_pred, target_names=iris.target_names)) <pre>Acur\u00e1cia: 0.8888888888888888\n\nRelat\u00f3rio de classifica\u00e7\u00e3o:\n               precision    recall  f1-score   support\n\n      setosa       1.00      1.00      1.00        15\n  versicolor       0.81      0.87      0.84        15\n   virginica       0.86      0.80      0.83        15\n\n    accuracy                           0.89        45\n   macro avg       0.89      0.89      0.89        45\nweighted avg       0.89      0.89      0.89        45\n\n</pre> In\u00a0[12]: Copied! <pre># %%\n# Gera a matriz de confus\u00e3o\ncm = confusion_matrix(y_test, y_pred)\n\n# Plota a matriz de confus\u00e3o usando um heatmap para melhor visualiza\u00e7\u00e3o\nplt.figure(figsize=(6, 5))\nsns.heatmap(\n    cm, \n    annot=True, \n    fmt=\"d\", \n    cmap=\"Blues\", \n    xticklabels=iris.target_names, \n    yticklabels=iris.target_names\n)\nplt.xlabel(\"Previsto\")\nplt.ylabel(\"Real\")\nplt.title(\"Matriz de Confus\u00e3o\")\nplt.show()\n</pre> # %% # Gera a matriz de confus\u00e3o cm = confusion_matrix(y_test, y_pred)  # Plota a matriz de confus\u00e3o usando um heatmap para melhor visualiza\u00e7\u00e3o plt.figure(figsize=(6, 5)) sns.heatmap(     cm,      annot=True,      fmt=\"d\",      cmap=\"Blues\",      xticklabels=iris.target_names,      yticklabels=iris.target_names ) plt.xlabel(\"Previsto\") plt.ylabel(\"Real\") plt.title(\"Matriz de Confus\u00e3o\") plt.show() In\u00a0[13]: Copied! <pre># %%\n# Plota a \u00e1rvore de decis\u00e3o gerada\nplt.figure(figsize=(20, 12))\nplot_tree(\n    clf, \n    feature_names=iris.feature_names, \n    class_names=list(iris.target_names), \n    filled=True,\n    fontsize=10\n)\nplt.title(\"\u00c1rvore de Decis\u00e3o - Dataset Iris\")\nplt.show()\n</pre> # %% # Plota a \u00e1rvore de decis\u00e3o gerada plt.figure(figsize=(20, 12)) plot_tree(     clf,      feature_names=iris.feature_names,      class_names=list(iris.target_names),      filled=True,     fontsize=10 ) plt.title(\"\u00c1rvore de Decis\u00e3o - Dataset Iris\") plt.show()"},{"location":"projeto/main/","title":"Projeto","text":"<p>Vou come\u00e7ar a fazer </p>"}]}